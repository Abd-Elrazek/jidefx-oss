buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.8'
        classpath 'org.kordamp.gradle:clirr-gradle-plugin:0.2.0'
    }
}

defaultTasks = ['build']

apply plugin: 'com.github.kt3k.coveralls'

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'com.github.ben-manes.versions'

    group = 'com.jidefx'
    version = "${VERSION}"

    configurations {
        jdk
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs = ["-g:${DEBUG_LEVELS}"]
    }

    repositories {
        jcenter()
    }
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = jacocoVersion
}

ext {
    jacocoProjects = []
    projectsWithClirr = []
}

subprojects { subproj ->
    subproj.apply from: rootProject.file('gradle/common.gradle')
    subproj.apply from: rootProject.file('gradle/publishing.gradle')
    subproj.apply from: rootProject.file('gradle/code-coverage.gradle')
    subproj.apply from: rootProject.file('gradle/code-quality.gradle')
    subproj.apply plugin: 'org.kordamp.gradle.clirr'

    subproj.clirr {
        failOnErrors = false
    }

    projectsWithClirr << subproj

    task sourcesJar(type: Jar) {
        group 'Build'
        description 'An archive of the source code'
        classifier 'sources'
        from sourceSets.main.allSource
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

def allModules = [
        "jidefx-common",
        "jidefx-comparators",
        "jidefx-converters",
        "jidefx-decoration",
        "jidefx-fields",
        "jidefx-validation"
]

def RELEASE_BASE = "build/release-${VERSION}"

task initExamples (type: Copy) {
    from(['module-examples/src/main/java']) {
        include '**/*'
    }
    from(['module-examples/src/main/resources']) {
        include '**/*'
    }
    into RELEASE_BASE + "/examples/src"
}

task initProjectFiles (type: Copy) {
    from(['module-examples/project files/gradle']) {
        include 'build.gradle'
        filter { line -> line.replaceAll('@@VERSION@@', "${VERSION}") }
    }
    from(['module-examples/project files/idea']) {
        include '**.*', ".idea/**", "lib/**"
    }
    into RELEASE_BASE
}

task build (overwrite: true, type: Copy, dependsOn: [subprojects.assemble, initProjectFiles, initExamples]) {
    from('doc') {
        include '*.pdf'
        into "doc"
    }
    from(allModules) {
        include 'doc/*.pdf'
        into "doc"
        eachFile { f ->
            f.path = f.path.replaceAll(/(.*\/)doc\/(.*)/, '$1$2')
        }
    }
    from(allModules) {
        include "dist/*-${VERSION}-javadoc.jar"
        into "javadoc"
        eachFile { f ->
            f.path = f.path.replaceAll(/(.*\/)dist\/(.*)/, '$1$2')
        }
    }
    from(allModules) {
        include "dist/*-${VERSION}.jar"
        exclude "dist/*javadoc.jar", "dist/*sources.jar"
        into "lib"
        eachFile { f ->
            f.path = f.path.replaceAll(/(.*\/)dist\/(.*)/, '$1$2')
        }
    }
    from(allModules) {
        include "dist/*-${VERSION}-sources.jar"
        into "src"
        eachFile { f ->
            f.path = f.path.replaceAll(/(.*\/)dist\/(.*)/, '$1$2')
        }
    }
    into RELEASE_BASE
    includeEmptyDirs = false
}

def PATH_RELEASE = 'dist'

task updateVersion << {
    def updateFiles = [
            'jidefx-common': 'build.gradle',
            'jidefx-common/src/main/java/jidefx/utils': 'Version.java',
            'jidefx-comparators': 'build.gradle',
            'jidefx-converters': 'build.gradle',
            'jidefx-decoration': 'build.gradle',
            'jidefx-fields': 'build.gradle',
            'jidefx-validation': 'build.gradle',
            'module-examples/project files/idea/.idea': 'workspace.xml',
            'module-examples/project files/idea/.idea/libraries': 'apache_commons.xml',
            'module-examples/project files/idea/.idea/libraries': 'jidefx.xml',
            'module-examples/project files/idea/.idea/libraries': 'miglayout.xml',
            'module-examples/project files/idea': 'jidefx-demo.iml',
            'module-examples/project files/gradle': 'build.gradle',
            'module-examples/project files/netbeans/nbproject': 'project.properties'
    ]

    def tmp = 'build/tmp/version'

    updateFiles.each{ key, value ->
        copy {
            from key
            include value
            into tmp
            filter { line -> line.replaceAll("${OLD_VERSION}", "${VERSION}") }
        }
        copy {
            from tmp
            include value
            into file(key)
        }
    }
}

task cleanBuild << {
    allModules.each {
        delete it + "/dist"
    }
    delete file(RELEASE_BASE)
}

task clean(overwrite: true, dependsOn: cleanBuild) {
}

coveralls {
    sourceDirs = files(jacocoProjects.sourceSets.main.allSource.srcDirs).files.absolutePath
}

evaluationDependsOnChildren()

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = jacocoProjects.test
    additionalSourceDirs = files(jacocoProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(jacocoProjects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(jacocoProjects.sourceSets.main.output)
    executionData = files(jacocoProjects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        html.destination = "${buildDir}/reports/jacoco/test/html"
        xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

task clirrRootReport(type: org.kordamp.gradle.clirr.ClirrReportTask) {
    dependsOn = projectsWithClirr.tasks.clirr
    reports = files(projectsWithClirr.tasks.clirr.xmlReport)
}